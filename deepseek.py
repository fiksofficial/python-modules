# –ù–∞ –º–æ–¥—É–ª—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏—è "GNU General Public License v3.0"
# https://github.com/all-licenses/GNU-General-Public-License-v3.0

# meta developer: @PyModule
from .. import loader, utils
import requests
import json
import asyncio

API_URL = "https://openrouter.ai/api/v1/chat/completions"
TG_MSG_LIMIT = 4096  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram

@loader.tds
class DeepSeekModule(loader.Module):
    "–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter API."

    strings = {"name": "DeepSeek"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "ANIMATION", False, "–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏",
            "API_KEY", "", "API –∫–ª—é—á OpenRouter"
        )
        self.history = []
    
    async def dsccmd(self, message):
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫ DeepSeek. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .dsc <–≤–æ–ø—Ä–æ—Å>"
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("**‚ùå –û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.", parse_mode="Markdown")
            return
        
        api_key = self.config["API_KEY"].strip()
        if not api_key:
            await message.edit("**‚ùå –û—à–∏–±–∫–∞:** API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="Markdown")
            return
        
        await message.edit("**üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...**", parse_mode="Markdown")
        
        self.history.append({"role": "user", "content": args})
        
        payload = {
            "model": "deepseek/deepseek-r1:free",
            "messages": self.history
        }
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(API_URL, headers=headers, data=json.dumps(payload))
            response.raise_for_status()
            data = response.json()
            
            if "choices" in data and len(data["choices"]) > 0:
                reply = data["choices"][0]["message"]["content"]
                self.history.append({"role": "assistant", "content": reply})
                
                if self.config["ANIMATION"]:
                    words = reply.split()
                    displayed_text = "**üí¨ –û—Ç–≤–µ—Ç:**\n\n"
                    
                    for word in words:
                        displayed_text += word + " "
                        await message.edit(displayed_text, parse_mode="Markdown")
                        await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
                else:
                    await message.edit(f"**üí¨ –û—Ç–≤–µ—Ç:**\n\n{reply}", parse_mode="Markdown")
            else:
                await message.edit("**‚ùå –û—à–∏–±–∫–∞:** –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API.", parse_mode="Markdown")
        except requests.exceptions.RequestException as e:
            await message.edit(f"**‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:** `{str(e)}`", parse_mode="Markdown")

    async def txtdsccmd(self, message):
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .txt —Ñ–∞–π–ª–∞ –≤ DeepSeek. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !txtdsc (–æ—Ç–≤–µ—Ç –Ω–∞ .txt —Ñ–∞–π–ª)"
        reply = await message.get_reply_message()
        if not reply or not reply.file or not reply.file.name.endswith(".txt"):
            await message.edit("**‚ùå –û—à–∏–±–∫–∞:** –û—Ç–≤–µ—Ç—å –Ω–∞ `.txt` —Ñ–∞–π–ª.", parse_mode="Markdown")
            return
        
        api_key = self.config["API_KEY"].strip()
        if not api_key:
            await message.edit("**‚ùå –û—à–∏–±–∫–∞:** API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="Markdown")
            return

        await message.edit("**üîÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª...**", parse_mode="Markdown")

        file_bytes = await reply.download_media(bytes)
        file_text = file_bytes.decode("utf-8").strip()

        if not file_text:
            await message.edit("**‚ùå –û—à–∏–±–∫–∞:** –§–∞–π–ª –ø—É—Å—Ç.", parse_mode="Markdown")
            return

        await message.edit("**üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...**", parse_mode="Markdown")

        self.history.append({"role": "user", "content": file_text})

        payload = {
            "model": "deepseek/deepseek-r1:free",
            "messages": self.history
        }

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        try:
            response = requests.post(API_URL, headers=headers, data=json.dumps(payload))
            response.raise_for_status()
            data = response.json()

            if "choices" in data and len(data["choices"]) > 0:
                reply_text = data["choices"][0]["message"]["content"]
                self.history.append({"role": "assistant", "content": reply_text})

                if self.config["ANIMATION"]:
                    words = reply_text.split()
                    displayed_text = "**üí¨ –û—Ç–≤–µ—Ç:**\n\n"

                    for word in words:
                        displayed_text += word + " "
                        await message.edit(displayed_text, parse_mode="Markdown")
                        await asyncio.sleep(0.2)
                else:
                    await message.edit("**üí¨ –û—Ç–≤–µ—Ç:**", parse_mode="Markdown")
                    await self.send_long_message(message, reply_text)
            else:
                await message.edit("**‚ùå –û—à–∏–±–∫–∞:** –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API.", parse_mode="Markdown")
        except requests.exceptions.RequestException as e:
            await message.edit(f"**‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:** `{str(e)}`", parse_mode="Markdown")
    
    async def cleardsccmd(self, message):
        "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å DeepSeek."
        self.history = []
        await message.edit("**‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.**", parse_mode="Markdown")

    async def send_long_message(self, message, text):
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
        chunks = [text[i : i + TG_MSG_LIMIT] for i in range(0, len(text), TG_MSG_LIMIT)]
        for chunk in chunks:
            await message.reply(chunk)
