# –ù–∞ –º–æ–¥—É–ª—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏—è "GNU General Public License v3.0"
# https://github.com/all-licenses/GNU-General-Public-License-v3.0

# meta developer: @PyModule
# requires: toml
import os
from hikka import loader, utils
import pickle
from telethon.tl.types import Channel
import toml


# noinspection PyCallingNonCallable
@loader.tds
class IrisRP(loader.Module):
    """–†–ü –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –≤ –±–æ—Ç–µ –ò—Ä–∏—Å."""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "action_decoration",
                'normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π',
                lambda: "–î–µ–∫–æ—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –†–ü-–∫–æ–º–∞–Ω–¥—ã",
                validator=loader.validators.Choice(
                    [
                        "normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π",
                        "bold | –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π",
                        "italic | –∫—É—Ä—Å–∏–≤",
                        "underlined | –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "strikethrough | –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "spoiler | —Å–∫—Ä—ã—Ç—ã–π",
                    ]
                ),
            ),

            loader.ConfigValue(
                "replica_decoration",
                'normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π',
                lambda: "–î–µ–∫–æ—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–ø–ª–∏–∫–∏ –†–ü-–∫–æ–º–∞–Ω–¥—ã",
                validator=loader.validators.Choice(
                    [
                        "normal | –±–µ–∑ —Å—Ç–∏–ª–µ–π",
                        "bold | –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π",
                        "italic | –∫—É—Ä—Å–∏–≤",
                        "underlined | –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "strikethrough | –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π",
                        "spoiler | —Å–∫—Ä—ã—Ç—ã–π",
                    ]
                ),
            ),

            loader.ConfigValue(
                "speech_bubble",
                'üí¨',
                lambda: "–≠–º–æ–¥–∑–∏ —Ä–µ—á–µ–≤–æ–≥–æ –ø—É–∑—ã—Ä—è –¥–ª—è ¬´—Å —Ä–µ–ø–ª–∏–∫–æ–π¬ª",
                validator=loader.validators.String()
            )
        )

    strings = {'name': 'IrisRP'}

    async def client_ready(self, client, db):
        self.db = db

        if not self.db.get("RPMod", "exlist", False):
            self.db.set("RPMod", "exlist", [])

        if not self.db.get("RPMod", "status", False):
            self.db.get("RPMod", "status", 1)

        if not self.db.get("RPMod", "rpcomands", False):
            self.db.set("RPMod", "rpcomands", {})

        if not self.db.get("RPMod", "rpemoji", False):
            self.db.set("RPMod", "rpemoji", {})

        if not self.db.get("RPMod", "nrpcommands", False):
            if self.db.get("RPMod", "rpcomands", False):
                commands_old = self.db.get("RPMod", "rpcomands")
                emoji_old = self.db.get("RPMod", "rpemoji")
                commands_new = {}
                for key in commands_old:
                    try:
                        commands_new[key] = [commands_old[key], emoji_old[key]]
                    except KeyError:
                        commands_new[key] = [commands_old[key], '']
                self.db.set("RPMod", "nrpcommands", commands_new)

            else:
                self.db.set("RPMod", "nrpcommands", {})

        if not self.db.get("RPMod", "useraccept", False):
            self.db.set("RPMod", "useraccept", {"chats": [], "users": []})

        elif isinstance(type(self.db.get("RPMod", "useraccept")), list):
            self.db.set(
                "RPMod",
                "useraccept",
                {"chats": [], "users": self.db.get("RPMod", "useraccept")},
            )

    async def addrpcmd(self, message):
        """[–∫–æ–º–∞–Ω–¥–∞ (1-3 —Å–ª–æ–≤–∞)] / [–¥–µ–π—Å—Ç–≤–∏–µ] / (—ç–º–æ–¥–∑–∏) - –°–æ–∑–¥–∞—Ç—å –†–ü –∫–æ–º–∞–Ω–¥—É."""
        args = utils.get_args_raw(message)
        dict_rp = self.db.get("RPMod", "nrpcommands", {})

        if not args or not args.strip():
            await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.</b>")
            return

        try:
            if '/' not in args:
                await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–º–∞–Ω–¥–∞ / –¥–µ–π—Å—Ç–≤–∏–µ / —ç–º–æ–¥–∑–∏</b>")
                return
            
            parts = [part.strip() for part in args.split("/", maxsplit=2)]
            
            if len(parts) < 2:
                await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–º–∞–Ω–¥–∞ / –¥–µ–π—Å—Ç–≤–∏–µ / —ç–º–æ–¥–∑–∏</b>")
                return
            
            key_rp = parts[0].casefold()
            words_count = len(key_rp.split())
            
            if words_count < 1 or words_count > 3:
                await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 3 —Å–ª–æ–≤.</b>")
                return

            value_rp = parts[1]
            if not value_rp.strip():
                await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã.</b>")
                return

            if key_rp == "all":
                await utils.answer(message, '<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–†–ü-–∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "all"</b>')
                return

            lenght_args = args.split("/")
            count_emoji = 0
            if len(lenght_args) >= 3:
                emoji_rp = str(message.text.split("/", maxsplit=2)[2]).strip()
                count_emoji = 1

                if not emoji_rp or not emoji_rp.strip():
                    await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —ç–º–æ–¥–∑–∏.</b>")
                    return
            
            dict_rp[key_rp] = [value_rp, emoji_rp.strip()]
            self.db.set("RPMod", "nrpcommands", dict_rp)
            
            response = f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ <code>{key_rp}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            if emoji_rp:
                response += f" —Å —ç–º–æ–¥–∑–∏ {emoji_rp}"
            response += ".</b>"
            
            await utils.answer(message, response)

        except Exception as e:
            await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–º–∞–Ω–¥–∞ (1-3 —Å–ª–æ–≤–∞) / –¥–µ–π—Å—Ç–≤–∏–µ / —ç–º–æ–¥–∑–∏</b>")

    async def delrpcmd(self, message):
        """[–∫–æ–º–∞–Ω–¥–∞ / all] - –£–¥–∞–ª–∏—Ç—å –†–ü –∫–æ–º–∞–Ω–¥—É."""
        dict_rp = self.db.get("RPMod", "nrpcommands")
        args = utils.get_args_raw(message)
        key_rp = str(args)

        if key_rp == "all":
            dict_rp.clear()
            self.db.set("RPMod", "nrpcommands", dict_rp)
            await utils.answer(message, "<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–í—Å–µ –†–ü –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.</b>")
            return

        elif not key_rp or not key_rp.strip():
            await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>")

        else:
            try:
                dict_rp.pop(key_rp)
                self.db.set("RPMod", "nrpcommands", dict_rp)
                await utils.answer(message, f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ <code>{key_rp}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.</b>")
            except KeyError:
                await utils.answer(message, f"<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ <code>{key_rp}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")

    async def rptogglecmd(self, message):
        """- –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –†–ü –∫–æ–º–∞–Ω–¥—ã."""
        status = self.db.get("RPMod", "status")
        if status == 1:
            self.db.set("RPMod", "status", 2)
            await utils.answer(message, "<emoji document_id=5253959125838090076>üëÅ</emoji> <b>–†–ü –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>")
        else:
            self.db.set("RPMod", "status", 1)
            await utils.answer(message, "<emoji document_id=5253959125838090076>üëÅ</emoji> <b>–†–ü –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã.</b>")

    async def rplistcmd(self, message):
        """- –°–ø–∏—Å–æ–∫ –≤—Å–µ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥."""
        com = self.db.get("RPMod", "nrpcommands")

        coms_amount = len(com)
        com_list = f"<emoji document_id=5253959125838090076>üëÅ</emoji> <b>–£ –≤–∞—Å {coms_amount} –∫–æ–º–∞–Ω–¥.</b>"

        if len(com) == 0:
            await utils.answer(message, f"<emoji document_id=5253959125838090076>üëÅ</emoji> <b>–£ –≤–∞—Å {coms_amount} –∫–æ–º–∞–Ω–¥.</b>")
            return

        for i in com:
            if com[i][1] != '':
                com_list += f"\n‚Ä¢   <b><code>{i}</code> - {com[i][0]} |</b> {com[i][1]}"
            else:
                com_list += f"\n‚Ä¢   <b><code>{i}</code> - {com[i][0]}</b>"

        await utils.answer(message, com_list)

    async def rpbackcmd(self, message):
        """(all) - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –†–ü –∫–æ–º–∞–Ω–¥. All –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
        commands = self.db.get("RPMod", "nrpcommands")
        mes_id = message.to_id
        me = await self.client.get_me()
        file_name = f"IrisRP_{me.id}.toml"

        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        replace_commands = "all" in args

        if not reply:
            try:
                await message.delete()
                with open(file_name, "w") as f:
                    toml.dump(commands, f)
                await message.client.send_file(mes_id, file_name)
                os.remove(file_name)
            except Exception as e:
                await utils.answer(message, f"<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:</b>\n<code>{e}</code>")
        else:
            if not reply.document:
                await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–∞.</b>")
                return

            try:
                await reply.download_media(file_name)

                with open(file_name, "r") as f:
                    try:
                        data = toml.load(f)
                    except toml.TomlDecodeError:
                        os.remove(file_name)
                        return await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—ç–∫–∞–ø–æ–º.</b>")

                for key in data.keys():
                    if not isinstance(data[key], list) or len(data[key]) != 2:
                        os.remove(file_name)
                        return await utils.answer(message, "<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—ç–∫–∞–ø–∞.</b>")

                if replace_commands:
                    self.db.set("RPMod", "nrpcommands", data)
                    os.remove(file_name)
                    await utils.answer(message, "<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–†–ü –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞.</b>")
                else:
                    updated_commands = {**commands, **data}
                    self.db.set("RPMod", "nrpcommands", updated_commands)
                    os.remove(file_name)
                    await utils.answer(message, "<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–†–ü –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞.</b>")

            except Exception as e:
                if os.path.exists(file_name):
                    os.remove(file_name)
                await utils.answer(message, f"<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—ç–∫–∞–ø–∞:</b>\n<code>{e}</code>")

    async def rpacmd(self, message):
        """(ID/Reply) - –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–ª–∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –†–ü –∫–æ–º–∞–Ω–¥–∞–º. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ .rpa"""
        
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        user_a = self.db.get("RPMod", "useraccept")

        if not reply and not args and message.is_group:
            chat = message.chat
            if chat.id not in user_a["chats"]:
                user_a["chats"].append(chat.id)
                return await utils.answer(message, f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –∫ –†–ü-–∫–æ–º–∞–Ω–¥–∞–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat.title}</b>")
            else:
                user_a["chats"].remove(chat.id)
                return await utils.answer(message, f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –∫ –†–ü-–∫–æ–º–∞–Ω–¥–∞–º –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat.title}</b>")

        elif args.lower() in ("-l", "–ª", "list", "—Å–ø–∏—Å–æ–∫"):
            sms = "<b><emoji document_id=5253959125838090076>üëÅ</emoji> –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤ –∫ –†–ü –∫–æ–º–∞–Ω–¥–∞–º:</b>"
            
            if not user_a["chats"] and not user_a["users"]:
                return await utils.answer(message,"<emoji document_id=6028435952299413210>‚Ñπ</emoji> <b>–ù–µ—Ç –Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∏ —á–∞—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –†–ü-–∫–æ–º–∞–Ω–¥–∞–º</b>")
            
            if user_a["chats"]:
                sms += "\n\n<emoji document_id=6037421444789440735>üí¨</emoji> <b>–ß–∞—Ç—ã —Å –¥–æ—Å—Ç—É–ø–æ–º:</b>"
                for chat_id in user_a["chats"]:
                    try:
                        chat = await message.client.get_entity(int(chat_id))
                        sms += f"\n‚Ä¢ <b>{chat.title}</b> (<code>{chat_id}</code>)"
                    except:
                        sms += f"\n‚Ä¢ <code>{chat_id}</code>"
            else:
                sms += "\n\n<emoji document_id=6028435952299413210>‚Ñπ</emoji> <b>–ù–µ—Ç —á–∞—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º</b>"
            
            if user_a["users"]:
                sms += "\n\n<emoji document_id=6035084557378654059>üë§</emoji> <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:</b>"
                for user_id in user_a["users"]:
                    try:
                        user = await message.client.get_entity(int(user_id))
                        sms += f"\n‚Ä¢ <b>{user.first_name}</b> (<code>{user_id}</code>)"
                    except:
                        sms += f"\n‚Ä¢ <code>{user_id}</code>"
            else:
                sms += "\n\n<emoji document_id=6028435952299413210>‚Ñπ</emoji> <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º</b>"
            
            await utils.answer(message, sms)

        elif args or reply:
            try:
                target_id = int(args) if args and args.isdigit() else reply.sender_id
                entity = await message.client.get_entity(target_id)
                
                is_channel = isinstance(entity, Channel)
                target_name = entity.title if is_channel else entity.first_name
                
                if is_channel:
                    if target_id in user_a["chats"]:
                        user_a["chats"].remove(target_id)
                        msg = f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {target_name}</b>"
                    else:
                        user_a["chats"].append(target_id)
                        msg = f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {target_name}</b>"
                else:
                    if target_id in user_a["users"]:
                        user_a["users"].remove(target_id)
                        msg = f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name}</b>"
                    else:
                        user_a["users"].append(target_id)
                        msg = f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–î–æ—Å—Ç—É–ø –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name}</b>"
                
                self.db.set("RPMod", "useraccept", user_a)
                await utils.answer(message, msg)
                
            except Exception as e:
                await utils.answer(
                    message,
                    f"<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
                )

        else:
            await utils.answer(
                message,
                "<blockquote><emoji document_id=6028435952299413210>‚Ñπ</emoji> <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b></blockquote>\n"
                "<code>.rpa</code> <b>–≤ —á–∞—Ç–µ - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º —á–∞—Ç–∞.</b>\n"
                "<code>.rpa [ID]</code> <b>- –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ ID.</b>\n"
                "<code>.rpa</code> <b>–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</b>\n"
                "<code>.rpa -l</code> <b>- —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤.</b>"
            )

    async def watcher(self, message):
        try:
            status = self.db.get("RPMod", "status", 0)
            commands = self.db.get("RPMod", "nrpcommands", {})
            users_accept = self.db.get("RPMod", "useraccept", {"users": [], "chats": []})

            if status != 1:
                return

            me_id = (await message.client.get_me()).id

            if (message.sender_id not in users_accept["users"] and 
                message.sender_id != me_id and 
                message.chat_id not in users_accept["chats"]):
                return

            me = await message.client.get_entity(message.sender_id)

            text = message.text or ""
            lines = text.splitlines()
            if not lines:
                return

            words = lines[0].split()
            if not words:
                return

            found_command = None
            for i in range(min(3, len(words)), 0, -1):
                possible_command = " ".join(words[:i]).casefold()
                if possible_command in commands:
                    found_command = possible_command
                    remaining_text = " ".join(words[i:]) if i < len(words) else ""
                    break

            if not found_command:
                return

            if len(words) > 1 and words[-1].startswith("@"):
                target_mention = words[-1][1:]
                try:
                    if target_mention.isdigit():
                        user = await message.client.get_entity(int(target_mention))
                    else:
                        user = await message.client.get_entity(target_mention)
                    remaining_text = " ".join(words[len(found_command.split()):-1])
                except:
                    reply = await message.get_reply_message()
                    if reply:
                        user = await message.client.get_entity(reply.sender_id)
                    else:
                        return
            else:
                reply = await message.get_reply_message()
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    return

            command = commands[found_command]

            replica = ""
            if len(lines) > 1:
                replica = "\n".join(lines[1:])

            action_decoration = self.config.get('action_decoration', '')
            replica_decoration = self.config.get('replica_decoration', '')
            bubble = self.config.get('speech_bubble', 'üí¨')

            s1 = {
                'bold': ("<b>", "</b>"),
                'italic': ("<i>", "</i>"),
                'underline': ("<u>", "</u>"),
                'strikethrough': ("<s>", "</s>"),
                'spoiler': ("<spoiler>", "</spoiler>")
            }.get(action_decoration, ("", ""))

            s2 = {
                'bold': ("<b>", "</b>"),
                'italic': ("<i>", "</i>"),
                'underline': ("<u>", "</u>"),
                'strikethrough': ("<s>", "</s>"),
                'spoiler': ("<spoiler>", "</spoiler>")
            }.get(replica_decoration, ("", ""))

            rp_message = []
            if command[1]:
                rp_message.append(f"{command[1]} | ")

            rp_message.append(
                f"<a href='tg://user?id={me.id}'>{me.first_name}</a> "
                f"{s1[0]}{command[0]}{s1[1]} "
                f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
            )

            if remaining_text:
                rp_message.append(remaining_text)

            if replica:
                rp_message.append(f"\n{bubble} <b>–° —Ä–µ–ø–ª–∏–∫–æ–π:</b> {s2[0]}{replica}{s2[1]}")

            await utils.answer(message, "".join(rp_message))

        except Exception as e:
            pass

    @staticmethod
    def merge_dict(d1, d2):
        d_all = {**d1, **d2}
        for key in d_all:
            d_all[key] = {**d1[key], **d_all[key]}
        return d_all
