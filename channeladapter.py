# –ù–∞ –º–æ–¥—É–ª—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏—è "GNU General Public License v3.0"
# https://github.com/all-licenses/GNU-General-Public-License-v3.0

# meta developer: @PyModule
import json
import os
from telethon.tl.types import Message
from .. import loader

@loader.tds
class ChannelAdapterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    strings = {"name": "ChannelAdapter"}

    def __init__(self):
        self.adapters_file = "adapters.json"
        self.adapters = self.load_adapters()

    def load_adapters(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        if os.path.exists(self.adapters_file):
            with open(self.adapters_file, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}

    def save_adapters(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä—ã –≤ —Ñ–∞–π–ª."""
        with open(self.adapters_file, "w", encoding="utf-8") as f:
            json.dump(self.adapters, f, ensure_ascii=False, indent=4)

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        if not self.adapters:
            self.adapters = {}

    @loader.command()
    async def addadaptercmd(self, message: Message):
        """[CHANNEL ID] [–¢–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫."""
        args = message.raw_text.split()
        if len(args) < 2:
            await message.edit("<emoji document_id=6030563507299160824>‚ùóÔ∏è</emoji> <b>–£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞.</b>")
            return

        chat_id = args[1]
        adapter_text = " ".join(args[2:])

        if not adapter_text:
            await message.edit("<emoji document_id=6030563507299160824>‚ùóÔ∏è</emoji> <b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞.</b>")
            return

        self.adapters[chat_id] = adapter_text
        self.save_adapters()

        await message.edit(f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–ü–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b> <code>{chat_id}</code> - {adapter_text}")

    async def deladaptercmd(self, message: Message):
        """[CHANNEL ID] - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞."""
        args = message.raw_text.split()
        if len(args) < 2:
            await message.edit("<emoji document_id=6030563507299160824>‚ùóÔ∏è</emoji> <b>–£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞.</b>")
            return

        chat_id = args[1]

        if chat_id not in self.adapters:
            await message.edit("<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.</b>")
            return

        del self.adapters[chat_id]
        self.save_adapters() 

        await message.edit(f"<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–ü–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ <code>{chat_id}</code> —É–¥–∞–ª—ë–Ω.</b>")

    async def listadapterscmd(self, message: Message):
        """- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–≤."""
        if not self.adapters:
            await message.edit("<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–≤.</b>")
            return

        text = "<blockquote><emoji document_id=5253959125838090076>üëÅ</emoji> <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–≤</b></blockquote>\n\n\n"
        for chat_id, adapter_text in self.adapters.items():
            text += f"<emoji document_id=6032924188828767321>‚ûï</emoji> <b><code>{chat_id}</code>:</b> {adapter_text}\n\n"

        await message.edit(text)

    async def clearadapterscmd(self, message: Message):
        """- –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∏."""
        if not self.adapters:
            await message.edit("<emoji document_id=5774077015388852135>‚ùå</emoji> <b>–ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>")
            return

        self.adapters = {}
        self.save_adapters()

        await message.edit("<emoji document_id=5774022692642492953>‚úÖ</emoji> <b>–í—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.</b>")

    async def watcher(self, message: Message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        if not message or not message.out:
            return
        
        adapter_text = self.adapters.get(str(message.chat_id), None)

        if not adapter_text:
            return

        try:
            if message.text:
                modified_text = f"{message.text}\n\n{adapter_text}"
                await message.edit(modified_text, parse_mode='html')
            elif message.media:
                modified_caption = f"{message.text}\n\n{adapter_text}" if message.text else adapter_text
                await message.edit(text=modified_caption, parse_mode='html')
        except Exception as e:
            me = await self.client.get_me()
            await self.client.send_message(me.id, f"<emoji document_id=6030563507299160824>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞ –≤ ChannelAdapter:</b>\n`{str(e)}`")
